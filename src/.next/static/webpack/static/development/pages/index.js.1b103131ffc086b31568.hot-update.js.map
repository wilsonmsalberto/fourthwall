{"version":3,"file":"static/webpack/static/development/pages/index.js.1b103131ffc086b31568.hot-update.js","sources":["webpack:///./components/nominees-list/Movie.js","webpack:///./components/nominees-list/Person.js","webpack:///./pages/index.js","webpack:///./state/movies/actionTypes.js","webpack:///./state/movies/actions.js","webpack:///./state/movies/reducer.js","webpack:///./state/movies/selectors.js","webpack:///./state/persons/actionTypes.js","webpack:///./state/persons/actions.js","webpack:///./state/persons/reducer.js","webpack:///./state/persons/selectors.js"],"sourcesContent":["// React\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// State\nimport * as selectors from 'state/movies/selectors';\n\nconst Movie = ({ image, title }) => (\n  <>\n    <img alt={ title } src={ `https://image.tmdb.org/t/p/w500${image}` } />\n    <h3>{title}</h3>\n  </>\n);\n\nMovie.propTypes = {\n  image: PropTypes.string,\n  title: PropTypes.string,\n};\n\nMovie.defaultProps = {\n  image: '',\n  title: '',\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  image: selectors.getMovieImage(state, ownProps.id),\n  title: selectors.getMovieTitle(state, ownProps.id),\n});\n\nexport default connect(mapStateToProps)(Movie);\n","// React\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// State\nimport * as selectors from 'state/persons/selectors';\n\nclass Person extends Component {\n    static propTypes = {\n      image: PropTypes.string,\n      title: PropTypes.string,\n    }\n\n    static defaultProps = {\n      image: '',\n      title: '',\n    }\n\n    componentDidMount() {\n      console.log('will get extra info');\n    }\n\n    render() {\n      const { image, title } = this.props;\n      return (\n        <>\n          <img alt={ title } src={ `https://image.tmdb.org/t/p/w500${image}` } />\n          <h3>{title}</h3>\n          {/* <p>{`in ${person.movie}`}</p> */}\n        </>\n      );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  image: selectors.getPersonImage(state, ownProps.id),\n  title: selectors.getPersonName(state, ownProps.id),\n});\n\nexport default connect(mapStateToProps)(Person);\n","// React\nimport React, { Component } from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// SDK\nimport awardList from 'sdk/awardList';\n\n// State\nimport { getMovie } from 'state/movies/actions';\nimport { getPerson } from 'state/persons/actions';\n\n// Components\nimport Home from 'views/home/Home';\n\nclass HomePage extends Component {\n  static async getInitialProps({ store }) {\n    await this.getNominees(store);\n\n    return {};\n  }\n\n  static getNominees = async (store) => {\n    const promises = [];\n\n    awardList.forEach((award) => {\n      award.nominees.forEach((nominee) => {\n        const { type, id } = nominee;\n\n        if (type === 'movie') {\n          promises.push(store.dispatch(getMovie(id)));\n        }\n\n        if (type === 'person') {\n          promises.push(store.dispatch(getPerson(id)));\n        }\n      });\n    });\n\n    await Promise.all(promises);\n  }\n\n  render() {\n    return (<Home />);\n  }\n}\n\nexport default connect(state => state)(HomePage);\n","export const GET_MOVIE_START = 'GET_MOVIE_START';\nexport const GET_MOVIE_SUCCESS = 'GET_MOVIE_SUCCESS';\nexport const GET_MOVIE_FAIL = 'GET_MOVIE_FAIL';\n","import { fetchMovie } from 'sdk';\nimport * as actionTypes from './actionTypes';\n\nexport const getMovie = id => async (dispatch, getState) => {\n  dispatch({ type: actionTypes.GET_MOVIE_START });\n\n  try {\n    let movie = getState().movies[id];\n\n    if (!movie) {\n      movie = await fetchMovie(id);\n    }\n\n    dispatch({ type: actionTypes.GET_MOVIE_SUCCESS, payload: { result: movie } });\n  } catch (error) {\n    dispatch({ type: actionTypes.GET_MOVIE_FAIL, payload: { error } });\n\n    throw error;\n  }\n};\n\nexport default getMovie;\n","import * as actionTypes from './actionTypes';\n\nexport const moviesInitialState = {\n  movies: {},\n};\n\nexport const movies = (state = moviesInitialState.movies, action = {}) => {\n  switch (action.type) {\n    case actionTypes.GET_MOVIE_SUCCESS: {\n      const { result } = action.payload;\n      if (!state[result.id]) {\n        state[result.id] = { ...result };\n      }\n      return { ...state };\n    }\n    case actionTypes.GET_MOVIE_START:\n    case actionTypes.GET_MOVIE_FAIL:\n    default:\n      return state;\n  }\n};\n\nexport const getMovies = (state = moviesInitialState.movies) => state;\n\nexport default movies;\n","/**\n * Module dependencies.\n */\n\nimport * as fromReducer from './reducer';\n\n/**\n  * Export `getMovies` selector.\n  */\n\nexport const getMovies = state => fromReducer.getMovies(state.movies);\n\n/**\n * Export `getMovieById` selector.\n */\n\nexport const getMovieById = (state, id) => {\n  const movies = getMovies(state);\n\n  return movies[id] || {};\n};\n\n/**\n * Export `getMovieTitle` selector.\n */\n\nexport const getMovieTitle = (state, id) => {\n  const movie = getMovieById(state, id);\n\n  return movie.title;\n};\n\n/**\n * Export `getMovieImage` selector.\n */\n\nexport const getMovieImage = (state, id) => {\n  const movie = getMovieById(state, id);\n\n  return movie.poster_path;\n};\n","export const GET_PERSON_START = 'GET_PERSON_START';\nexport const GET_PERSON_SUCCESS = 'GET_PERSON_SUCCESS';\nexport const GET_PERSON_FAIL = 'GET_PERSON_FAIL';\n","import { fetchPerson } from 'sdk';\nimport * as actionTypes from './actionTypes';\n\nexport const getPerson = id => async (dispatch, getState) => {\n  dispatch({ type: actionTypes.GET_PERSON_START });\n  try {\n    let person = getState().persons[id];\n\n    if (!person) {\n      person = await fetchPerson(id);\n    }\n\n    dispatch({ type: actionTypes.GET_PERSON_SUCCESS, payload: { result: person } });\n  } catch (error) {\n    dispatch({ type: actionTypes.GET_PERSON_FAIL, payload: { error } });\n\n    throw error;\n  }\n};\n\nexport default getPerson;\n","import * as actionTypes from './actionTypes';\n\nexport const personsInitialState = {\n  persons: {},\n};\n\nexport const persons = (state = personsInitialState.persons, action = {}) => {\n  switch (action.type) {\n    case actionTypes.GET_PERSON_SUCCESS: {\n      const { result } = action.payload;\n      if (!state[result.id]) {\n        state[result.id] = { ...result };\n      }\n      return { ...state };\n    }\n    case actionTypes.GET_PERSON_START:\n    case actionTypes.GET_PERSON_FAIL:\n    default:\n      return state;\n  }\n};\n\nexport const getPersons = (state = personsInitialState.persons) => state;\n\nexport default persons;\n","/**\n * Module dependencies.\n */\n\nimport * as fromReducer from './reducer';\n\n/**\n  * Export `getPersons` selector.\n  */\n\nexport const getPersons = state => fromReducer.getPersons(state.persons);\n\n/**\n * Export `getPersonById` selector.\n */\n\nexport const getPersonById = (state, id) => {\n  const persons = getPersons(state);\n\n  return persons[id] || {};\n};\n\n/**\n * Export `getPersonName` selector.\n */\n\nexport const getPersonName = (state, id) => {\n  const person = getPersonById(state, id);\n\n  return person.name;\n};\n\n/**\n * Export `getMovieImage` selector.\n */\n\nexport const getPersonImage = (state, id) => {\n  const person = getPersonById(state, id);\n\n  return person.profile_path;\n};\n"],"mappings":"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","sourceRoot":""}